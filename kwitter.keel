model Account {
    fields {
        username Text
        identity Identity @unique
        following Follow[]
        tweets Tweet[]
    }

    actions {
        create newAccount() with (username) {
            @set(account.identity = ctx.identity)
        }
        get getAccount() {
            @where(account.identity == ctx.identity)
        }
        list findAccounts(username) {
            @where(account.identity != ctx.identity)
        }
        read consistentFeed(id) returns (FeedMessage)
    }

    @permission(
        expression: ctx.isAuthenticated,
        actions: [get, list, create, update]
    )
}

model Follow {
    fields {
        follower Account @relation(following)
        followee Account
    }

    actions {
        create follow() with (follower.id, followee.id)
    }

    // With a new follow, the feed must be populated 
    // with existing tweets
    @on(
        [create],
        backPopulate
    )

    @permission(
        expression: true,
        actions: [get, list, create, update]
    )
}

message FeedMessage {
    feed Feed[]
}

model Feed {
    fields {
        account Account
        username Text
        content Text
        tweetedAt Timestamp
    }

    actions {
        list feed() {
            @where(feed.account.identity == ctx.identity)
            @orderBy(tweetedAt: desc)
            @permission(expression: ctx.isAuthenticated)
        }
    }
}

message FollowMessage {
    accountId ID
}

model Tweet {
    fields {
        content Text
        account Account
    }

    actions {
        create newTweet() with (content, account.id) {
            //@set(tweet.account = ctx.identity.account) BACKLINKS!
            @permission(expression: ctx.isAuthenticated)
        }
        list myTweets() {
            @where(tweet.account.identity == ctx.identity)
            @orderBy(createdAt: desc)
            @permission(expression: ctx.isAuthenticated)
        }
        delete deleteTweet(id) {
            @permission(expression: ctx.isAuthenticated)
        }
    }

    // With a new tweet we need to propogate
    // it to all follower's feeds
    @on(
        [create],
        propogateTweet
    )
}

job Seed {
    @permission(expression: true)
}

model Retreat {
    fields {
        name Text
        rooms Room[]
        attendees Attendee[]
    }
}

model Room {
    fields {
        name Text
        retreat Retreat
        allocatedTo Attendee?
    }

    actions {
        update allocate(id) with (allocatedTo.id)
    }

    @unique([retreat, allocatedTo])
}

model Attendee {
    fields {
        name Text
        retreat Retreat
    }
}
